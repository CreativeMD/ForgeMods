plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.+'
	id 'org.spongepowered.mixin'
}

version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: "${project.property 'minecraft_version'}"
	
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            mods {
                CreativeCore {
                    source project(':CreativeCore').sourceSets.main
                }
                EnhancedVisuals {
                    source project(':EnhancedVisuals').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            mods {
                CreativeCore {
                    source project(':CreativeCore').sourceSets.main
                }
                EnhancedVisuals {
                    source project(':EnhancedVisuals').sourceSets.main
                }
            }
        }
    }
}

jar {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.property 'minecraft_version'}-${project.property 'forge_version'}"
	
	// Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

	implementation project(':CreativeCore')
	//implementation project(':AmbientSounds')
	//implementation project(':ItemPhysicLite')
	//implementation project(':ItemPhysic')
	//implementation project(':CMDCam')
	implementation project(':EnhancedVisuals')
	//implementation project(':Friendermite')
	//implementation project(':OpticManager')
	//implementation project(':PlayerRevive')
	//implementation project(':LittleTiles')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

mixin {
    // MixinGradle Settings
    add project(':CreativeCore').sourceSets.main, 'creativecore.mixins.refmap.json'
    add project(':EnhancedVisuals').sourceSets.main, 'enhancedvisuals.mixin.refmap.json'
     
    config 'creativecore.mixins.json'
    config 'enhancedvisuals.mixins.json'
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
